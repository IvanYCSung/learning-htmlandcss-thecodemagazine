* {
  /* border-top: 10px solid #1098ad; */
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
/* *{} = universal element, has the lowest priority and apply styles to all the elements */

/* inheritance */
/* parent elements inherit styles to their child elements. if child elements have their own styles, overwrite patent's style even though the parents' coding order is last */

/* h1,
h2,
h3,
h4,
p,
li {
  font-family: sans-serif;
  color: #444444;
} */
/* inherit from theie parent element, body{} */

body {
  background-color: #fcfceb;
  font-family: sans-serif;
  border-top: 10px solid #1098ad;
  position: relative;
}

.container {
  width: 1200px;
  /* margin-left: auto;
  margin-right: auto; or below */
  margin: 0 auto;
  /* margin-left and right are set to auto, the browser will calculate the margin for left and right automatically and equally when user resize their windows */
}
/* .container is created for centering purpose */

.main-header {
  background-color: #fee9a0;
  /* padding: 20px;
  padding-left: 40px;
  padding-right: 40px; or below */
  padding: 20px 40px; /* top & bottom left & right */
  /* margin-bottom: 60px; */
}

nav {
  font-size: 18px;
  /* text-align: center; */
}

nav a:link {
  /* to test how inlink element behaves*/
  /*background-color: orangered;
  margin: 20px;
  padding: 20px;
  display: block; */

  display: inline-block;
  margin-right: 30px;
}
/* <img>, <button>, <em>, <strong> and <a> are "inline elements", property height, width, padding-top/bottom and margin-top/bottom do not work on them, but padding-left/right and margin-left/right work. 

display: block : change to block element
display: inline : change to inline element
display: inline-block : change to inline-block element, hehaves like inline element but also applies properties
*/

nav a:link:last-child {
  margin-right: 0;
}

button {
  font-size: 22px;
  padding: 20px;
  cursor: pointer;

  position: absolute;
  bottom: 50px;
  right: 50px;
}

article {
  /* margin-bottom: 60px; */
}

.post-header {
  margin-bottom: 40px;
}

aside {
  background-color: #fee9a0;
  border-top: 5px solid#1098ad;
  border-bottom: 5px solid#1098ad;
  padding: 50px 40px;
}

h1,
h2,
h3 {
  color: #1098ad;
}

h1 {
  font-size: 26px;
  text-transform: uppercase;
  font-style: italic;
}

h1::first-letter {
  font-style: normal;
  margin-right: 5px;
}

h2 {
  font-size: 40px;
  margin-bottom: 30px;
  position: relative;
}

h2::after {
  content: "TOP";
  background-color: #ffe70e;
  color: #444;
  font-size: 16px;
  font-weight: bold;
  display: inline-block; /* "TOP" was created by using pseudo element, it is a inline element. in order to change padding, we need to convert it into inline-block */
  padding: 5px 10px;
  position: absolute;
  top: -10px;
  right: -25px;
} /* "TOP" was created in CSS by using pseudo element, not in HTML */

h3 {
  font-size: 30px;
  margin-bottom: 20px;
  margin-top: 40px; /* p{} above this h3{} has margin-bottom 15px, but it will not make the space between p{} and h3{} 65px (40 + 15). it is because of "collapsing margin", CSS only shows the biggest margin (h3{} in this case). The smallest margin (p{}) has become part of h3{}'s margin.*/
}

h4 {
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
  margin-bottom: 30px;
}

p {
  font-size: 22px;
  line-height: 1.5;
  margin-bottom: 15px;
}

h3 + p::first-line {
  /* color: red; */
} /* + is adjacent sibling selector, in this case + select the next sibling element of h3 */

ul,
ol {
  margin-left: 50px;
  margin-bottom: 20px;
  /* if margin-left is 0, the order list numbers and unordered list bullet points will not show */
}

li {
  font-size: 20px;
  margin-bottom: 10px;
}

li:last-child {
  margin-bottom: 0;
}

/* style <li> instead of its parent elements <ol> or <ul> */

/* descendent selector
footer p {
  font-size: 16px;
}

article header p {
  font-style: italic;
}
use id istead of using descendent selector to style html if there are multiple article header p */

#author {
  font-style: italic;
  font-size: 18px;
}

#copyright {
  font-size: 16px;
}
/* # = id, id does not usually get used, but class */

.related-author {
  font-size: 18px;
  font-weight: bold;
}

.related {
  list-style: none;
  margin-left: 0;
}
/*.=class*/

/* pseudo class, use it when you have a bunch of the same elements such as li, not p, h, header, article...*/
li:first-child {
  font-weight: bold;
}

li:last-child {
  font-style: italic;
}

/*
li:nth-child(2) {
  color: red;
} we can use number, odd or even in ()
*/

/* pseudo class for hyperlink */
/* always code them in below order - :link, :visited, :hover then :active */
a:link {
  color: #1098ad;
  text-decoration: none; /*remove the under line*/
}
/* :link targets <a> actually have links. if no :link, all <a> will be styled even though they have no links*/

a:visited {
  color: #1098ad;
}
/*color changes after users click the links*/

a:hover {
  color: orangered;
  font-weight: bold;
  text-decoration: underline dotted orangered;
}

a:active {
  background-color: black;
  font-style: italic;
}
/* this style activates when users click */

/*resolving conflicts*/
#copyright {
  color: red;
} /*highest priority*/

.copyright {
  color: blue;
} /*3rd priority*/

.text {
  color: yellow;
} /*2nd priority*/

footer p {
  color: green;
} /* lowest priority */

/* footer p {
  color: green !important;
} add !important to make this selector become the highest priority, but we should not do it */

.post-img {
  width: 100%; /* 100% of the parent element, <header>. When users resize the brower window or have different screen deifnitions, the picture always stays 100%. if we use pxiel as a measurement unit, the picture size is fixed */
  height: auto; /* the height was already specified in HTML, but we don't usually size pictures in HTML */
}

/* float */
/*
.author-img {
  float: left;
  margin-bottom: 20px;
}

.author {
  float: left;
  margin-left: 20px;
  margin-top: 10px;
}

h1 {
  float: left;
}

nav {
  float: right;
}

.clear {
  clear: both;
} /* clear the impact caused by float element, easy to fix but not to use, use "clearfix hack" below 

.clearfix::after {
  clear: both;
  content: "";/* ::after psuedo element only works on content property, so give a blank content 
  display: block; /* ::after psuedo element is an inline element 
}

article {
  width: 825px;
  float: left;
}

aside {
  width: 300px;
  float: right;
}

footer {
  clear: both;
}
*/

/* flex */
/*use flex function on the parent elements of the elements we would like to change*/
.main-header {
  display: flex;
  align-items: center;
  justify-content: space-between; /*space between h1 and nav*/
} /*.main-header is the parent element of h1 and nav*/

.author-box {
  display: flex;
  align-items: center;
  margin-bottom: 15px;
}

.author {
  margin-bottom: 0;
  margin-left: 15px;
}

.related-post {
  display: flex;
  align-items: center;
  gap: 20px;
  margin-bottom: 30px;
}

.related-link:link {
  font-size: 17px;
  font-weight: bold;
  font-style: normal;
  margin-bottom: 5px;
  /*<a> is a inline element, margin does not work. we have to change it to block element*/
  display: block;
}

.related-author {
  margin-bottom: 0;
  font-size: 14px;
  font-weight: normal;
  font-style: italic;
}

/* flexbox layout
.row {
  display: flex;
  gap: 75px;
  margin-bottom: 60px;
  align-items: flex-start;
}

article {
  flex: 1;
  margin-bottom: 0;
}

aside {
  flex: 0 0 300px;
}
*/

/* CSS grid */
.container {
  display: grid;
  grid-template-columns: 1fr 300px;
  column-gap: 75px;
  row-gap: 60px;
  align-items: start;
}

.main-header {
  grid-column: 1 / span 2;
  /* or grid-column: 1 / -1;*/
}

footer {
  grid-column: 1 / -1;
}
